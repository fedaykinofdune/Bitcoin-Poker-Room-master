package Room::Model::PokerNetwork;

use strict;
use base 'Catalyst::Model::DBIC::Schema';

__PACKAGE__->config(
);

=head1 NAME

Room::Model::PokerNetwork - Catalyst DBIC Schema Model

=head1 SYNOPSIS

See L<Room>

=head1 DESCRIPTION

L<Catalyst::Model::DBIC::Schema> Model using schema L<Room::Schema::PokerNetwork>

=head1 GENERATED BY

Catalyst::Helper::Model::DBIC::Schema - 0.38

=head1 AUTHOR

Pavel Karoukin

=head1 LICENSE

Copyright (C) 2010 Pavel A. Karoukin <pavel@yepcorp.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut

use Moose;
use Cache::Memcached;

our $pokernetwork_memcache;

sub BUILD {
  my $self = shift;

  $self->{pokernetwork_memcache} = new Cache::Memcached {
    'servers' => [
      $self->{pokernetwork_memcache_servers}
    ],
  };
}

sub get_user_id_by_auth {
  my ($self, $auth) = @_;

  return $self->{pokernetwork_memcache}->get($auth);
}

sub set_user_id_by_auth {
  my ($self, $user_id, $auth) = @_;

  if ($self->{pokernetwork_memcache}->get('uid::' . $user_id)) {
    $self->{pokernetwork_memcache}->delete($_);
  }

  $self->{pokernetwork_memcache}->set('uid::' . $user_id, $auth);
  return $self->{pokernetwork_memcache}->set($auth, $user_id);
}

sub logout {
  my ($self, $auth) = @_;

  my $uid = $self->{pokernetwork_memcache}->get($auth);
  $self->{pokernetwork_memcache}->delete('uid::'. $uid);
  return $self->{pokernetwork_memcache}->delete($auth);
}

1;
